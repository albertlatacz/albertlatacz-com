<p>
    This is a second part of <em>"Java concurrency with actors"</em> tutorial. Just to remind you in the <a
        href="/java-actors-1" title="Java concurrency with actors (part 1)">first part</a> we have
    explained the concept of actors, how to create them using Java and Akka as well as one way communication between
    actors. In this part I'm going to experiment a bit with two way messaging and multiple actors. Ok, let's get busy..
</p>

<p>
    Although actors with one way messaging can be used in the majority of cases, sometimes you may need to wait until
    one
    or more units of work has been completed. That's where two way messaging can be used. As a scenario, let's say we
    have a machine that sells post stamps. The machine issues 1st class stamp for letters and ignore any other items.
    When client buys a stamp, he will wait by machine until it is printed. If we were to use actors with two way
    messaging, implementation could look like this:
</p>

<script src="https://gist.github.com/albertlatacz/5413159.js?file=StampMachineActor.java"></script>

<p>
    Notice that now actor uses <em>getContext().replySafe()</em> method to reply to messages, which returns
    <em>true</em> if reply was successfully submitted or <em>false</em> in a case where unable to reply (e.g. when
    message was submitted one way using <em>sendOneWay()</em>). Also, since the framework delegate call to handle the
    message to <em>onReceive()</em>, which is the same method as in the case of one way messaging, actors should handle
    both styles of messaging. In our case we only want to issue the stamp if someone (another actor) is actually waiting
    for it, and therefore are going to report <em>Sender not found for..</em> when actor receives one way message. Also
    we need actor to only handle message of type <em>Letter</em>. Below example shows how to submit two way messages:
</p>

<script src="https://gist.github.com/albertlatacz/5413159.js?file=sendTwoWayMessages.java"></script>

<p>Output:</p>
<pre>
  Sender not found for Letter{size=SMALL}
  Reply sent for Letter{size=MEDIUM}
  Issued 1st class stamp for Letter{size=MEDIUM}
  Reply sent for elephant
  elephant? There's no way you can send that!!!
</pre>

<p>
    Having only one actor performing a task is useful but that wouldn't be a truly concurrent. Let's have a look at
    another scenario. Imagine the post office that receives parcels on delivery lorries and we are interested in total
    weight of all parcels.We can create a <em>scale actor</em> that will weigh several parcels and work out total
    weight, and then use several actors to divide the work. Have a look at below example
</p>

<script src="https://gist.github.com/albertlatacz/5413159.js?file=ParcelScaleActor.java"></script>

<p>
    So far so good! Our actor will iterate over the list of parcels, calculate total weight and then use <em>getContext().replySafe()</em>
    to pass back the result. That looks quite similar to the previous example with stamp machine. The difference is in
    the way we trigger the actor and for that we will use a pattern called <em>Future</em>. For those unfamiliar with
    the concept, <em>future</em> represents result of asynchronous computation and usually also provides functions
    associated with changing or monitoring the state of that computation (e.g. cancel, hasCompleted, etc..). Note that
    Java provides an implementation of future pattern in concurrency package but we will not be able to use it here due
    to the Akka's <em>active objects</em> architecture. Let's have a look how to invoke our actor using Akka futures
</p>

<script src="https://gist.github.com/albertlatacz/5413159.js?file=sendToMultipleActors.java"></script>

<p>
    In above code we are using different method (<em>sendRequestReplyFuture()</em>) to submit messages to the actors,
    which returns <em>future</em> object of type <em>akka.dispatch.Future</em>. We then use this object to wait on it
    until our task has completed (<em>totalWeightFuture.await()</em>) and retrieve result. After running <em>sendToMultipleActors()</em>
    we should get the following output:
</p>


<pre>
  Weight of parcels is 5
  Weight of parcels is 10
  Weight of parcels is 15
  Total weight parcels is 30
</pre>

<p>That was a second part of <em>"Java concurrency with actors"</em> tutorial introducing two way messaging with Akka
    actors. You can download sources for this and future tutorials of the series from my <a
            href="https://github.com/voxavion/JavaActorsWithAkka" target="_blank">GitHub repository</a>.
</p>